#include "imports/stdlib.fc";

const int op::update_record = 0x6151f535;

global slice owner;
global cell records;

() load_data () impure {
    slice ds = get_data().begin_parse();
    owner = ds~load_msg_addr();
    records = ds~load_dict();
}

() save_data () impure {
    set_data(begin_cell()
        .store_slice(owner)
        .store_dict(records)
    .end_cell());
}

() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    slice sender = cs~load_msg_addr();
    load_data();
    throw_unless(501, equal_slices(sender, owner));

    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (op == op::update_record) {
        int key = in_msg_body~load_uint(256);
        if (in_msg_body~load_uint(1) == 1) {
            cell value = in_msg_body~load_ref();
            records~udict_set_ref(256, key, value);
        } else {
            records~udict_delete?(256, key);
        }
        save_data();
    }
}

(int, cell) dnsresolve (slice subdomain, int category) method_id {
    int subdomain_bits = slice_bits(subdomain);
    throw_unless(70, subdomain_bits % 8 == 0);
    int starts_with_zero_byte = subdomain.preload_int(8) == 0;
    throw_unless(413, starts_with_zero_byte);

    load_data();

    if (subdomain_bits > 8) { ;; more than "." requested
        category = "dns_next_resolver"H;
    }

    if (category == 0) { ;;  all categories are requested
        return (8, records);
    }

    (cell value, int found) = records.udict_get_ref?(256, category);
    return (8, value);
}